import numpy as np

def bbox_format(bbox, im_height, im_width):
    '''converts the bbox generated by the TF-OD model 
    into the format [x_min, y_min, x_max, y_max].
    Expects Normalized Coordinates as Input'''
        
    y_top_left = bbox[0] * im_height
    x_top_left = bbox[1] * im_width
    y_bottom_right = bbox[2] * im_height
    x_bottom_right = bbox[3] * im_width
    
    # width = abs(x_bottom_right - x_top_left)
    # height = abs(y_bottom_right - y_top_left)
    
    new_bbox = [x_top_left, y_top_left, x_bottom_right, y_bottom_right]
    
    return new_bbox

def parse_output_dict(output_dict, category_map, im_height, im_width, score_threshold):
    '''parse the output_dict from the OD model'''
    
    bboxes = output_dict['detection_boxes']
    scores = output_dict['detection_scores']
    classes = output_dict["detection_classes"]
    
    # consider only the detections which cross the threshold
    indices = np.argwhere(scores > score_threshold)

    bboxes = np.squeeze(bboxes[indices])
    classes = np.squeeze(classes[indices])
    
    dict_list = []
    for i in range(len(classes)):
        temp_dict = {}
        temp_dict.update({'label': category_map[classes[i]]['name']})
        bbox_new = bbox_format(bboxes[i], im_height, im_width)
        # we convert the bbox values to int as only then it's read by labelimg
        bbox_new = list(map(lambda x: np.int64(x), bbox_new))
        temp_dict.update({'bbox': bbox_new})
        dict_list.append(temp_dict)

    return dict_list